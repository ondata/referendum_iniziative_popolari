---
import Layout from '../layouts/Layout.astro';
import HamburgerMenuNative from '../components/HamburgerMenuNative.astro';
import Footer from '../components/Footer.astro';
import { fetchInitiatives } from '../lib/initiatives';
import { normalizeBaseUrl, createPath } from '../lib/paths';
import { readFileSync } from 'node:fs';

// Carica i dati delle iniziative
const initiatives = await fetchInitiatives();

// Carica i dati della media sostenitori giornalieri
async function loadMediaSostenitori() {
  try {
    const mediaData = await import('../../data/media_sostenitori_giornaliera.jsonl?raw');
    const lines = mediaData.default.trim().split('\n');
    return lines.map(line => JSON.parse(line));
  } catch (error) {
    console.warn('Error loading media sostenitori data:', error);
    return [];
  }
}

const mediaSostenitori = await loadMediaSostenitori();

// --- LOGICA PER L'ACCELERAZIONE ---
// Carica i dati storici completi
const timeLineRaw = readFileSync('data/time_line.jsonl', 'utf8');
const timeLineData = timeLineRaw.trim().split('\n').map(line => JSON.parse(line));

// Raggruppa i dati per ID
const timeLineGroups = timeLineData.reduce((acc, d) => {
  const id = d.id;
  if (!acc[id]) {
    acc[id] = [];
  }
  acc[id].push({ ...d, data: new Date(d.data) });
  return acc;
}, {} as Record<string, any[]>);

// Calcola l'accelerazione in percentuale per ogni iniziativa
const accelerationData: Record<string, number> = {};
for (const id in timeLineGroups) {
  const group = timeLineGroups[id];
  // Ordina per data decrescente
  group.sort((a: any, b: any) => b.data.getTime() - a.data.getTime());

  // Per il calcolo dell'accelerazione servono dati di 4 giorni,
  // perché l'ultimo giorno disponibile non è mai completo.
  if (group.length >= 4) {
    // Calcolo della crescita del giorno precedente all'ultimo (es. ieri vs altroieri)
    const delta_last_day = group[1].sostenitori - group[2].sostenitori;
    // Calcolo della crescita di due giorni prima (es. altroieri vs 3 giorni fa)
    const delta_previous_day = group[2].sostenitori - group[3].sostenitori;

    let acceleration_percent = 0;
    // Calcola la percentuale solo se il giorno prima c'è stata una crescita (per evitare divisione per zero o valori fuorvianti)
    if (delta_previous_day > 0) {
      acceleration_percent = ((delta_last_day - delta_previous_day) / delta_previous_day) * 100;
    } else if (delta_previous_day <= 0 && delta_last_day > 0) {
      // Se prima non c'era crescita (o era negativa) e ora c'è, è un segnale forte.
      // Lo indichiamo convenzionalmente come +100% per semplicità di confronto.
      acceleration_percent = 100;
    }

    accelerationData[id] = Math.round(acceleration_percent);
  }
}
// --- FINE LOGICA ACCELERAZIONE ---

// Unisci i dati delle iniziative con i dati della media sostenitori e accelerazione
const initiativesWithMedia = initiatives.map(initiative => {
  const mediaData = mediaSostenitori.find(m => m.id === initiative.id);
  const acceleration = accelerationData[initiative.id] || 0;
  return {
    ...initiative,
    sostenitori_delta_mean: mediaData?.sostenitori_delta_mean || 0,
    acceleration: acceleration
  };
});

// Top 10 iniziative per sostenitori_delta_mean
const top10ByMedia = initiativesWithMedia
  .filter(init => init.sostenitori_delta_mean > 0 && init.idDecStatoIniziativa?.nome === 'IN RACCOLTA FIRME')
  .sort((a, b) => b.sostenitori_delta_mean - a.sostenitori_delta_mean)
  .slice(0, 10)
  .map(init => ({
    ...init,
    sostenitori_delta_mean: Math.round(init.sostenitori_delta_mean)
  }));

const maxMediaValue = Math.max(...top10ByMedia.map(init => init.sostenitori_delta_mean));

// Calcola il numero di iniziative per categoria
const categoryCounts = initiatives.reduce((acc, initiative) => {
  const categoria = initiative.idDecCatIniziativa?.nome || 'Senza categoria';
  acc[categoria] = (acc[categoria] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Calcola il valore massimo per la scala delle categorie
const maxCount = Math.max(...Object.values(categoryCounts));

// Ordina per valori decrescenti
const sortedCategories = Object.entries(categoryCounts)
  .sort(([, a], [, b]) => b - a)
  .map(([nome, count]) => ({ nome, count }));

// Calcola le iniziative attive (in raccolta firme)
const activeInitiatives = initiatives.filter(initiative =>
  initiative.idDecStatoIniziativa?.nome === 'IN RACCOLTA FIRME'
).length;

// Gestione robusta dei percorsi usando le utility
const baseUrl = import.meta.env.BASE_URL;
---

<Layout title="Numeri - Iniziative Referendum" description="Statistiche e numeri delle iniziative referendarie" ogImage="og-numeri.png">
  <div class="min-h-screen bg-gray-50">
    <!-- Header con pulsante torna alle iniziative e menu hamburger -->
    <header class="bg-white border-b border-gray-200 sticky top-0 z-10">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <a href={createPath('/')} class="inline-flex items-center text-blue-600 hover:text-blue-700 font-medium">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m0 7h18" />
              </svg>
              Torna alle iniziative
            </a>
          </div>
          <HamburgerMenuNative baseUrl={baseUrl} />
        </div>
      </div>
    </header>

    <!-- Title Section -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="text-center">
          <h1 id="numeri" class="text-3xl font-bold text-gray-900 sm:text-4xl scroll-mt-20">
            <a href="#numeri" class="group hover:text-blue-600 transition-colors duration-200">
              Numeri
              <svg class="w-6 h-6 ml-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
            </a>
          </h1>
          <p class="mt-2 text-lg text-gray-600">
            Un po' di numeri di riepilogo sulle iniziative
          </p>
        </div>
      </div>
    </div>

    <!-- Main content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="bg-white rounded-lg shadow-sm p-6">
        <h2 id="iniziative-per-categoria" class="text-2xl font-semibold text-gray-900 mb-6 scroll-mt-20">
          <a href="#iniziative-per-categoria" class="group flex items-center hover:text-blue-600 transition-colors duration-200">
            Numero di iniziative per categoria
            <svg class="w-5 h-5 ml-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
          </a>
        </h2>

        <!-- Istogramma orizzontale -->
        <div class="space-y-4">
          {sortedCategories.map(({ nome, count }) => {
            const percentage = (count / maxCount) * 100;
            const categoryUrl = `${createPath('/')}?categoria=${encodeURIComponent(nome)}`;
            return (
              <div class="relative">
                <!-- Etichetta categoria cliccabile -->
                <div class="flex justify-between items-center mb-2">
                  <a
                    href={categoryUrl}
                    class="text-sm font-medium text-blue-600 hover:text-blue-800 capitalize transition-colors duration-200 cursor-pointer underline-offset-4 hover:underline"
                    title={`Visualizza tutte le iniziative della categoria: ${nome}`}
                  >
                    {nome.toLowerCase()}
                  </a>
                  <span class="text-sm font-bold text-gray-900">
                    {count}
                  </span>
                </div>

                <!-- Barra dell'istogramma -->
                <div class="w-full bg-gray-200 rounded-full h-8 relative overflow-hidden">
                  <div
                    class="bg-gradient-to-r from-blue-500 to-blue-600 h-8 rounded-full flex items-center justify-end pr-3 transition-all duration-700 ease-out"
                    style={`width: ${percentage}%`}
                  >
                    <span class="text-white text-xs font-medium">
                      {count > 0 && percentage > 15 ? count : ''}
                    </span>
                  </div>

                  <!-- Numero fuori dalla barra se è troppo piccola -->
                  {percentage <= 15 && (
                    <span class="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs font-medium text-gray-700">
                      {count}
                    </span>
                  )}
                </div>
              </div>
            );
          })}
        </div>

        <!-- Statistiche aggiuntive -->
        <div class="mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div class="bg-blue-50 rounded-lg p-4 text-center">
            <div class="text-2xl font-bold text-blue-600">
              {initiatives.length}
            </div>
            <div class="text-sm text-blue-800">
              Totale iniziative
            </div>
          </div>

          <div class="bg-green-50 rounded-lg p-4 text-center">
            <div class="text-2xl font-bold text-green-600">
              {activeInitiatives}
            </div>
            <div class="text-sm text-green-800">
              Iniziative attive
            </div>
          </div>

          <div class="bg-orange-50 rounded-lg p-4 text-center">
            <div class="text-2xl font-bold text-orange-600">
              {sortedCategories.length}
            </div>
            <div class="text-sm text-orange-800">
              Categorie attive
            </div>
          </div>

          <div class="bg-purple-50 rounded-lg p-4 text-center">
            <div class="text-2xl font-bold text-purple-600">
              {initiatives.reduce((sum, init) => sum + (init.sostenitori || 0), 0).toLocaleString('it-IT')}
            </div>
            <div class="text-sm text-purple-800">
              Totale firme
            </div>
          </div>
        </div>

        <!-- Note -->
        <div class="mt-6 p-4 bg-gray-50 rounded-lg">
          <p class="text-sm text-gray-600">
            <strong>Nota:</strong> I dati sono ordinati per numero decrescente di iniziative per categoria.
            L'istogramma mostra la distribuzione delle {initiatives.length} iniziative totali presenti nella piattaforma.
          </p>
          <p class="text-sm text-gray-600 mt-2">
            <strong>Tip:</strong> Clicca sul nome di una categoria per visualizzare tutte le iniziative di quella categoria.
            Puoi anche cliccare sui titoli delle sezioni per ottenere un link diretto a quella sezione.
          </p>
          <p class="text-sm text-gray-600 mt-2">
            <strong>Dati:</strong> <a href="https://raw.githubusercontent.com/ondata/referendum_iniziative_popolari/refs/heads/main/data/source.jsonl" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline">dati</a>
          </p>
        </div>
      </div>

      <!-- Grafico Lollipop Top 10 Media Sostenitori -->
      {top10ByMedia.length > 0 && (
        <div class="bg-white rounded-lg shadow-sm p-6 mt-8">
          <h2 id="top-media-sostenitori" class="text-2xl font-semibold text-gray-900 mb-6 scroll-mt-20">
            <a href="#top-media-sostenitori" class="group flex items-center hover:text-blue-600 transition-colors duration-200">
              Top 10 - Media sostenitori giornalieri
              <svg class="w-5 h-5 ml-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
            </a>
          </h2>

          <!-- Grafico Lollipop orizzontale (desktop) / Tabella (mobile) -->

          <!-- Versione mobile: Tabella semplice -->
          <div class="md:hidden">
            <div class="overflow-hidden bg-white shadow ring-1 ring-black ring-opacity-5 rounded-lg">
              <table class="min-w-full divide-y divide-gray-300">
                <thead class="bg-gray-50">
                  <tr>
                    <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Iniziativa
                    </th>
                    <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Media/giorno
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  {top10ByMedia.map((initiative, index) => {
                    const initiativeUrl = createPath(`/initiative/${initiative.id}`);
                    const truncatedTitle = initiative.titolo.length > 40
                      ? initiative.titolo.substring(0, 40) + '...'
                      : initiative.titolo;

                    return (
                      <tr class="hover:bg-gray-50">
                        <td class="px-4 py-3">
                          <a
                            href={initiativeUrl}
                            class="text-sm text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200"
                            title={initiative.titolo}
                          >
                            {truncatedTitle}
                          </a>
                        </td>
                        <td class="px-4 py-3 text-right">
                          <span class="text-sm font-semibold text-gray-900">
                            {initiative.sostenitori_delta_mean}
                          </span>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>

          <!-- Versione desktop: Grafico Lollipop -->
          <div class="hidden md:block space-y-6">
            {top10ByMedia.map((initiative, index) => {
              const percentage = (initiative.sostenitori_delta_mean / maxMediaValue) * 100;
              const initiativeUrl = createPath(`/initiative/${initiative.id}`);
              const truncatedTitle = initiative.titolo.length > 40
                ? initiative.titolo.substring(0, 40) + '...'
                : initiative.titolo;

              return (
                <div class="relative flex items-center">
                  <!-- Titolo troncato su desktop -->
                  <div class="w-80 flex-shrink-0">
                    <a
                      href={initiativeUrl}
                      class="text-sm font-bold text-blue-600 hover:text-blue-800 transition-colors duration-200 cursor-pointer hover:underline"
                      title={initiative.titolo}
                      data-tooltip={initiative.titolo}
                    >
                      {truncatedTitle}
                    </a>
                    <div class={`text-xs mt-1 ${initiative.acceleration > 0 ? 'text-green-600' : initiative.acceleration < 0 ? 'text-red-600' : 'text-gray-500'}`}>
                      Tendenza:
                      <span class="font-semibold">
                        {initiative.acceleration > 0 ? '▲' : initiative.acceleration < 0 ? '▼' : ''}
                        {initiative.acceleration > 0 ? ` +${initiative.acceleration}%` : initiative.acceleration < 0 ? ` ${initiative.acceleration}%`: ' Stabile'}
                      </span>
                    </div>
                  </div>

                  <!-- Linea e pallino del lollipop -->
                  <div class="flex-1 relative">
                    <!-- Linea di base -->
                    <div class="w-full h-0.5 bg-gray-200 relative">
                      <!-- Linea colorata -->
                      <div
                        class="h-0.5 bg-gradient-to-r from-emerald-400 to-emerald-600 transition-all duration-1000 ease-out"
                        style={`width: ${percentage}%`}
                      ></div>

                      <!-- Pallino del lollipop -->
                      <div
                        class="absolute top-1/2 transform -translate-y-1/2 w-4 h-4 bg-emerald-500 rounded-full border-2 border-white shadow-md transition-all duration-1000 ease-out"
                        style={`left: ${percentage}%`}
                      ></div>
                    </div>

                    <!-- Valore numerico -->
                    <div
                      class="absolute top-2 text-sm font-medium text-gray-700 transition-all duration-1000 ease-out"
                      style={`left: ${percentage}%`}
                    >
                      {initiative.sostenitori_delta_mean}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <!-- Legenda e note -->
          <div class="mt-6 p-4 bg-gray-50 rounded-lg">
            <p class="text-sm text-gray-600">
              <strong>Nota:</strong> Mostra le 10 iniziative <strong>attive</strong> (in raccolta firme) con la più alta media di sostenitori acquisiti per giorno. <br />
              Sia la <strong>media dei sostenitori giornalieri</strong> che la <strong>tendenza</strong> sono calcolate <u>escludendo il giorno corrente</u>, perché il dato di oggi sarebbe un campione incompleto. La <strong>tendenza</strong> calcola l'accelerazione della raccolta confrontando la crescita di firme di ieri con quella dell'altro ieri. L'<strong>aggiornamento</strong> dei dati avviene ogni <strong>24 ore</strong>.
            </p>
            <p class="text-sm text-gray-600 mt-2">
              <strong>Tip:</strong> Clicca sulla voce per accedere alla pagina di dettaglio dell'iniziativa.
              Su desktop viene mostrato un grafico lollipop, su mobile una tabella compatta.
              Clicca sul titolo della sezione per ottenere un link diretto a questo grafico.
            </p>
            <p class="text-sm text-gray-600 mt-2">
              <strong>Dati:</strong> <a href="https://raw.githubusercontent.com/ondata/referendum_iniziative_popolari/refs/heads/main/data/time_line.jsonl" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline">dati</a>
            </p>
          </div>
        </div>
      )}
    </main>

    <!-- Footer -->
    <Footer />
  </div>
</Layout>

<style>
  /* Animazione per le barre */
  .bg-gradient-to-r {
    animation: slideIn 0.8s ease-out;
  }

  @keyframes slideIn {
    from {
      width: 0%;
    }
    to {
      width: var(--target-width);
    }
  }

  /* Tooltip personalizzato */
  [data-tooltip] {
    position: relative;
  }

  [data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 12px;
    white-space: nowrap;
    max-width: 300px;
    white-space: normal;
    word-wrap: break-word;
    z-index: 1000;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  [data-tooltip]:hover::before {
    content: '';
    position: absolute;
    bottom: 92%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
  }

  /* Animazioni per il lollipop */
  .lollipop-line {
    transition: width 1s ease-out;
  }

  .lollipop-dot {
    transition: left 1s ease-out;
  }

  .lollipop-value {
    transition: left 1s ease-out;
  }
</style>

<script>
  // Aggiungi animazione alle barre quando la pagina è caricata
  document.addEventListener('DOMContentLoaded', () => {
    const bars = document.querySelectorAll('.bg-gradient-to-r');
    bars.forEach((bar, index) => {
      const element = bar as HTMLElement;
      const targetWidth = element.style.width;
      element.style.width = '0%';

      setTimeout(() => {
        element.style.width = targetWidth;
      }, index * 100);
    });

    // Animazione per i grafici lollipop
    const lollipopLines = document.querySelectorAll('[data-target-width]');
    const lollipopDots = document.querySelectorAll('[data-target-left]');

    // Inizializza le posizioni a 0
    lollipopLines.forEach((line) => {
      const element = line as HTMLElement;
      element.style.width = '0%';
    });

    lollipopDots.forEach((dot) => {
      const element = dot as HTMLElement;
      element.style.left = '0%';
    });

    // Anima verso le posizioni target
    setTimeout(() => {
      lollipopLines.forEach((line, index) => {
        const element = line as HTMLElement;
        const targetWidth = element.getAttribute('data-target-width');
        if (targetWidth) {
          setTimeout(() => {
            element.style.width = `${targetWidth}%`;
          }, index * 150);
        }
      });

      lollipopDots.forEach((dot, index) => {
        const element = dot as HTMLElement;
        const targetLeft = element.getAttribute('data-target-left');
        if (targetLeft) {
          setTimeout(() => {
            element.style.left = `${targetLeft}%`;
          }, index * 150);
        }
      });
    }, 500); // Ritardo iniziale per permettere il caricamento
  });
</script>
